import numpy as np
import talib as ta

def remove_nan(data):
  return data[~np.isnan(data).any(axis=1)]

def add_all_indicators(data_raw):
  o = data_raw[:, 0]
  h = data_raw[:, 1]
  l = data_raw[:, 2]
  c = data_raw[:, 3]
  v = data_raw[:, 4]
  indicator = []
  indicator = [np.asarray(ta.AD(h, l, c, v))]
  #indicator += [np.asarray(ta.ADOSC(h, l, c, v))]
  indicator += [np.asarray(ta.ADX(h, l, c))]
  #indicator += [np.asarray(ta.ADXR(h, l, c))]
  #indicator += [np.asarray(ta.APO(c))]
  indicator += [np.asarray(ta.AROON(h, l))]
  #indicator += [np.asarray(ta.AROONOSC(h, l))]
  #indicator += [np.asarray(ta.ATR(h, l, c))]
  #indicator += [np.asarray(ta.AVGPRICE(o, h, l, c))]
  #indicator += [np.asarray(ta.BBANDS(c))]
  ##indicator += [np.asarray(ta.BOP(o, h, l, c))]
  ##indicator += [np.asarray(ta.CCI(h, l, c))]
  #indicator += [np.asarray(ta.CDL2CROWS(o, h, l, c))]
  #indicator += [np.asarray(ta.CDL3BLACKCROWS(o, h, l, c))]
  #indicator += [np.asarray(ta.CDL3INSIDE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDL3LINESTRIKE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDL3OUTSIDE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDL3STARSINSOUTH(o, h, l, c))]
  #indicator += [np.asarray(ta.CDL3WHITESOLDIERS(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLABANDONEDBABY(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLADVANCEBLOCK(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLBELTHOLD(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLBREAKAWAY(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLCLOSINGMARUBOZU(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLCONCEALBABYSWALL(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLCOUNTERATTACK(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLDARKCLOUDCOVER(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLDOJI(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLDOJISTAR(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLDRAGONFLYDOJI(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLENGULFING(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLEVENINGDOJISTAR(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLEVENINGSTAR(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLGAPSIDESIDEWHITE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLGRAVESTONEDOJI(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHAMMER(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHANGINGMAN(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHARAMI(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHARAMICROSS(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHIGHWAVE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHIKKAKE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHIKKAKEMOD(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLHOMINGPIGEON(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLIDENTICAL3CROWS(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLINNECK(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLINVERTEDHAMMER(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLKICKING(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLKICKINGBYLENGTH(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLLADDERBOTTOM(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLLONGLEGGEDDOJI(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLLONGLINE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLMARUBOZU(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLMATCHINGLOW(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLMATHOLD(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLMORNINGDOJISTAR(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLMORNINGSTAR(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLONNECK(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLPIERCING(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLRICKSHAWMAN(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLRISEFALL3METHODS(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLSEPARATINGLINES(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLSHOOTINGSTAR(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLSHORTLINE(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLSPINNINGTOP(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLSTALLEDPATTERN(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLTAKURI(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLTASUKIGAP(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLTHRUSTING(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLTRISTAR(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLUNIQUE3RIVER(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLUPSIDEGAP2CROWS(o, h, l, c))]
  #indicator += [np.asarray(ta.CDLXSIDEGAP3METHODS(o, h, l, c))]
  ##indicator += [np.asarray(ta.CMO(c))]
  #indicator += [np.asarray(ta.DEMA(c))]
  #indicator += [np.asarray(ta.DX(h, l, c))]
  #indicator += [np.asarray(ta.EMA(c))]
  #indicator += [np.asarray(ta.HT_DCPERIOD(c))]
  #indicator += [np.asarray(ta.HT_DCPHASE(c))]
  ##indicator += [np.asarray(ta.HT_PHASOR(c))]
  #indicator += [np.asarray(ta.HT_SINE(c))]
  #indicator += [np.asarray(ta.HT_TRENDLINE(c))]
  #indicator += [np.asarray(ta.HT_TRENDMODE(c))]
  #indicator += [np.asarray(ta.KAMA(c))]
  #indicator += [np.asarray(ta.MA(c))]
  #indicator += [np.asarray(ta.MACD(c))]
  #indicator += [np.asarray(ta.MACDEXT(c))]
  #indicator += [np.asarray(ta.MACDFIX(c))]
  #indicator += [np.asarray(ta.MAMA(c))]
  #indicator += [np.asarray(ta.MEDPRICE(h, l))]
  ##indicator += [np.asarray(ta.MFI(h, l, c, v))]
  #indicator += [np.asarray(ta.MIDPOINT(c))]
  #indicator += [np.asarray(ta.MIDPRICE(h, l))]
  #indicator += [np.asarray(ta.MINUS_DI(h, l, c))]
  #indicator += [np.asarray(ta.MINUS_DM(h, l))]
  #indicator += [np.asarray(ta.MOM(c))]
  #indicator += [np.asarray(ta.NATR(h, l, c))]
  indicator += [np.asarray(ta.OBV(c, v))]
  #indicator += [np.asarray(ta.PLUS_DI(h, l, c))]
  #indicator += [np.asarray(ta.PLUS_DM(h, l))]
  #indicator += [np.asarray(ta.PPO(c))]
  #indicator += [np.asarray(ta.ROC(c))]
  #indicator += [np.asarray(ta.RSI(c))]
  #indicator += [np.asarray(ta.SAR(h, l))]
  #indicator += [np.asarray(ta.SAREXT(h, l))]
  #indicator += [np.asarray(ta.SMA(c))]
  #indicator += [np.asarray(ta.STOCH(h, l, c))]
  #indicator += [np.asarray(ta.STOCHF(h, l, c))]
  #indicator += [np.asarray(ta.STOCHRSI(c))]
  #indicator += [np.asarray(ta.T3(c))]
  #indicator += [np.asarray(ta.TRANGE(h, l, c))]
  #indicator += [np.asarray(ta.TRIMA(c))]
  #indicator += [np.asarray(ta.TRIX(c))]
  #indicator += [np.asarray(ta.TYPPRICE(h, l, c))]
  #indicator += [np.asarray(ta.ULTOSC(h, l, c))]
  #indicator += [np.asarray(ta.WCLPRICE(h, l, c))]
  #indicator += [np.asarray(ta.WILLR(h, l, c))]
  #indicator += [np.asarray(ta.WMA(c))]
  
  for i in xrange(len(indicator)):
    if indicator[i].shape[0] != data_raw.shape[0]:
      indicator[i] = np.transpose(indicator[i])
    if len(indicator[i].shape) != 2:
      indicator[i] = np.expand_dims(indicator[i], axis = 1)
  
  data_all = np.concatenate(([data_raw] + indicator + [np.expand_dims(data_raw[:, 3], axis = 1)]), axis = 1)
  data_all = remove_nan(data_all)

  return data_all
